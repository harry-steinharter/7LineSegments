ungroup() %>%
distinct()
rawIndividual <- dfReal %>%
group_by(Participant_Number,CondShort,Target_Contrast) %>%
mutate(performance = mean(Correct_Response), weights = n()) %>%
ungroup() %>%
distinct()
# Save the raw data
write.csv(rawIndividual,'glmDataRaw7LS.csv', row.names=FALSE)
write.csv(meanByTC,'subjectMeansByTCFactorRaw7LS.csv',row.names = FALSE)
write.csv(grandMean_real,'subjectMeansOverallRaw7LS.csv',row.names = FALSE)
library(magrittr)
library(dplyr)
MC <- function(L_max, L_min = 112.6482, nDigits=3){
# Function to find michelson contrast using L_min as the background luminance in PsychoPy units
michelson_contrast <- (L_max-L_min) / (L_max+L_min)
michelson_contrast %<>% round(nDigits)
return(michelson_contrast)
}
toCandela <- function(x, nDigits = 10){
CandelaPerMeterSquared <- (x * 112.417) + 112.6482
CandelaPerMeterSquared %<>% round(nDigits)
return(CandelaPerMeterSquared)
}
categorize <- function(df){
df %<>%mutate(
WidthGroup = case_when(
CondShort %in% c("Constant", "Single") ~ "controls",
CondShort %in% c('IW','DW') ~ "wide",
CondShort %in% c('IN','DN') ~ "narrow"
),
ExpectedGroup = case_when(
CondShort %in% c('Constant','IN','IW') ~ 'high',
CondShort %in% c('Single','DN','DW') ~ 'low'
)
)
return(df)
}
setwd('/Users/harrysteinharter/Documents/MSc/Timo Internship/7LineSegments/Analysis')
# List all CSV files in the directory
file_list <- list.files(path = "../Outputs/", pattern = "\\.csv$", full.names = TRUE)
# Read and bind all CSV files into one data frame
all_data <- do.call(rbind, lapply(file_list, read.csv))
df <- all_data %>%  subset(Reaction_Time < 99)
#### Perform transformations ####
if (TRUE){
df$TC_c <- scale(df$Target_Contrast,scale=F) %>% c()
df$TC_michelson <- toCandela(df$Target_Contrast) %>% MC()
df$TC_michelson_c <- scale(df$TC_michelson,scale=F) %>% c()
df$FCfar_c <- scale(df$FCfar,scale=F) %>% c()
df$FCfar_michelson <- toCandela(df$FCfar) %>% MC()
df$FCfar_michelson_c <- scale(df$FCfar_michelson,scale=F) %>% c()
df$FCmed_c <- scale(df$FCmed,scale=F) %>% c()
df$FCmed_michelson <- toCandela(df$FCmed) %>% MC()
df$FCmed_michelson_c <- scale(df$FCmed_michelson,scale=F) %>% c()
df$FCclose_c <- scale(df$FCclose,scale=F) %>% c()
df$FCclose_michelson <- toCandela(df$FCclose) %>% MC()
df$FCclose_michelson_c <- scale(df$FCclose_michelson,scale=F) %>% c()
df$CondShort <- recode(df$Condition, recodes =
"'FarHighNarrow' = 'IN'; 'FarLowNarrow' = 'DN';
'FarHighWide' = 'IW'; 'FarLowWide' = 'DW';
'ThreeLinesControl' = 'Single'; 'Constant' = 'Constant'") %>% as.factor()
df %<>% mutate(TC_factor = ggplot2::cut_number(Target_Contrast, 3, labels = c("Low", "Medium", "High")))
}
#### Seperate ####
# Seperate into Real and Null Files
dfNull <- subset(df, endsWith(Condition,"_null"))
droplevels(dfNull$CondShort)
dfReal <- subset(df, !endsWith(Condition,"_null"))
droplevels(dfReal$CondShort)
dfReal %<>% categorize
#### Mutate real data ####
grandMean_real <- dfReal %>%
group_by(Participant_Number,Condition) %>%
mutate(overall_mean = mean(TC_michelson), weights = n()) %>%
ungroup() %>%
distinct()
meanByTC <- dfReal %>%
group_by(Participant_Number,CondShort,TC_factor) %>%
mutate(mean = mean(TC_michelson), weights = n()) %>%
ungroup() %>%
distinct()
rawIndividual <- dfReal %>%
group_by(Participant_Number,CondShort,Target_Contrast) %>%
mutate(performance = mean(Correct_Response), weights = n()) %>%
ungroup() %>%
distinct()
# Save the raw data
write.csv(rawIndividual,'glmDataRaw7LS.csv', row.names=FALSE)
write.csv(meanByTC,'subjectMeansByTCFactorRaw7LS.csv',row.names = FALSE)
write.csv(grandMean_real,'subjectMeansOverallRaw7LS.csv',row.names = FALSE)
library(magrittr)
library(dplyr)
MC <- function(L_max, L_min = 112.6482, nDigits=3){
# Function to find michelson contrast using L_min as the background luminance in PsychoPy units
michelson_contrast <- (L_max-L_min) / (L_max+L_min)
michelson_contrast %<>% round(nDigits)
return(michelson_contrast)
}
toCandela <- function(x, nDigits = 10){
CandelaPerMeterSquared <- (x * 112.417) + 112.6482
CandelaPerMeterSquared %<>% round(nDigits)
return(CandelaPerMeterSquared)
}
categorize <- function(df){
df %<>%mutate(
WidthGroup = case_when(
CondShort %in% c("Constant", "Single") ~ "controls",
CondShort %in% c('IW','DW') ~ "wide",
CondShort %in% c('IN','DN') ~ "narrow"
),
ExpectedGroup = case_when(
CondShort %in% c('Constant','IN','IW') ~ 'high',
CondShort %in% c('Single','DN','DW') ~ 'low'
)
)
return(df)
}
setwd('/Users/harrysteinharter/Documents/MSc/Timo Internship/7LineSegments/Analysis')
# List all CSV files in the directory
file_list <- list.files(path = "../Outputs/", pattern = "\\.csv$", full.names = TRUE)
# Read and bind all CSV files into one data frame
all_data <- do.call(rbind, lapply(file_list, read.csv))
df <- all_data %>%  subset(Reaction_Time < 99)
#### Perform transformations ####
if (TRUE){
df$TC_c <- scale(df$Target_Contrast,scale=F) %>% c()
df$TC_michelson <- toCandela(df$Target_Contrast) %>% MC()
df$TC_michelson_c <- scale(df$TC_michelson,scale=F) %>% c()
df$FCfar_c <- scale(df$FCfar,scale=F) %>% c()
df$FCfar_michelson <- toCandela(df$FCfar) %>% MC()
df$FCfar_michelson_c <- scale(df$FCfar_michelson,scale=F) %>% c()
df$FCmed_c <- scale(df$FCmed,scale=F) %>% c()
df$FCmed_michelson <- toCandela(df$FCmed) %>% MC()
df$FCmed_michelson_c <- scale(df$FCmed_michelson,scale=F) %>% c()
df$FCclose_c <- scale(df$FCclose,scale=F) %>% c()
df$FCclose_michelson <- toCandela(df$FCclose) %>% MC()
df$FCclose_michelson_c <- scale(df$FCclose_michelson,scale=F) %>% c()
df$CondShort <- recode(df$Condition, recodes =
"'FarHighNarrow' = 'IN'; 'FarLowNarrow' = 'DN';
'FarHighWide' = 'IW'; 'FarLowWide' = 'DW';
'ThreeLinesControl' = 'Single'; 'Constant' = 'Constant'") %>% as.factor()
df %<>% mutate(TC_factor = ggplot2::cut_number(Target_Contrast, 3, labels = c("Low", "Medium", "High")))
}
#### Seperate ####
# Seperate into Real and Null Files
dfNull <- subset(df, endsWith(Condition,"_null"))
droplevels(dfNull$CondShort)
dfReal <- subset(df, !endsWith(Condition,"_null"))
droplevels(dfReal$CondShort)
#dfReal %<>% categorize
#### Mutate real data ####
grandMean_real <- dfReal %>%
group_by(Participant_Number,Condition) %>%
mutate(overall_mean = mean(TC_michelson), weights = n()) %>%
ungroup() %>%
distinct()
meanByTC <- dfReal %>%
group_by(Participant_Number,CondShort,TC_factor) %>%
mutate(mean = mean(TC_michelson), weights = n()) %>%
ungroup() %>%
distinct()
rawIndividual <- dfReal %>%
group_by(Participant_Number,CondShort,Target_Contrast) %>%
mutate(performance = mean(Correct_Response), weights = n()) %>%
ungroup() %>%
distinct()
# Save the raw data
write.csv(rawIndividual,'glmDataRaw7LS.csv', row.names=FALSE)
write.csv(meanByTC,'subjectMeansByTCFactorRaw7LS.csv',row.names = FALSE)
write.csv(grandMean_real,'subjectMeansOverallRaw7LS.csv',row.names = FALSE)
library(magrittr)
library(dplyr)
MC <- function(L_max, L_min = 112.6482, nDigits=3){
# Function to find michelson contrast using L_min as the background luminance in PsychoPy units
michelson_contrast <- (L_max-L_min) / (L_max+L_min)
michelson_contrast %<>% round(nDigits)
return(michelson_contrast)
}
toCandela <- function(x, nDigits = 10){
CandelaPerMeterSquared <- (x * 112.417) + 112.6482
CandelaPerMeterSquared %<>% round(nDigits)
return(CandelaPerMeterSquared)
}
categorize <- function(df){
df %<>%mutate(
WidthGroup = case_when(
CondShort %in% c("Constant", "Single") ~ "controls",
CondShort %in% c('IW','DW') ~ "wide",
CondShort %in% c('IN','DN') ~ "narrow"
),
ExpectedGroup = case_when(
CondShort %in% c('Constant','IN','IW') ~ 'high',
CondShort %in% c('Single','DN','DW') ~ 'low'
)
)
return(df)
}
setwd('/Users/harrysteinharter/Documents/MSc/Timo Internship/7LineSegments/Analysis')
# List all CSV files in the directory
file_list <- list.files(path = "../Outputs/", pattern = "\\.csv$", full.names = TRUE)
# Read and bind all CSV files into one data frame
all_data <- do.call(rbind, lapply(file_list, read.csv))
df <- all_data %>%  subset(Reaction_Time < 99)
#### Perform transformations ####
if (TRUE){
df$TC_c <- scale(df$Target_Contrast,scale=F) %>% c()
df$TC_michelson <- toCandela(df$Target_Contrast) %>% MC()
df$TC_michelson_c <- scale(df$TC_michelson,scale=F) %>% c()
df$FCfar_c <- scale(df$FCfar,scale=F) %>% c()
df$FCfar_michelson <- toCandela(df$FCfar) %>% MC()
df$FCfar_michelson_c <- scale(df$FCfar_michelson,scale=F) %>% c()
df$FCmed_c <- scale(df$FCmed,scale=F) %>% c()
df$FCmed_michelson <- toCandela(df$FCmed) %>% MC()
df$FCmed_michelson_c <- scale(df$FCmed_michelson,scale=F) %>% c()
df$FCclose_c <- scale(df$FCclose,scale=F) %>% c()
df$FCclose_michelson <- toCandela(df$FCclose) %>% MC()
df$FCclose_michelson_c <- scale(df$FCclose_michelson,scale=F) %>% c()
df$CondShort <- recode(df$Condition, recodes =
"'FarHighNarrow' = 'IN'; 'FarLowNarrow' = 'DN';
'FarHighWide' = 'IW'; 'FarLowWide' = 'DW';
'ThreeLinesControl' = 'Single'; 'Constant' = 'Constant'") %>% as.factor()
df %<>% mutate(TC_factor = ggplot2::cut_number(Target_Contrast, 3, labels = c("Low", "Medium", "High")))
}
#### Seperate ####
# Seperate into Real and Null Files
dfNull <- subset(df, endsWith(Condition,"_null"))
droplevels(dfNull$CondShort)
dfReal <- subset(df, !endsWith(Condition,"_null"))
droplevels(dfReal$CondShort)
dfReal %<>% categorize
#### Mutate real data ####
grandMean_real <- dfReal %>%
group_by(Participant_Number,Condition) %>%
mutate(overall_mean = mean(TC_michelson), weights = n()) %>%
select(Participant_Number,CondShort,overall_mean,WidthGroup,ExpectedGroup) %>%
ungroup() %>%
distinct()
meanByTC <- dfReal %>%
group_by(Participant_Number,CondShort,TC_factor) %>%
mutate(mean = mean(TC_michelson), weights = n()) %>%
select(Participant_Number,TC_factor,CondShort,mean,WidthGroup,ExpectedGroup) %>%
ungroup() %>%
distinct()
rawIndividual <- dfReal %>%
group_by(Participant_Number,CondShort,Target_Contrast) %>%
mutate(performance = mean(Correct_Response), weights = n()) %>%
ungroup() %>%
distinct()
# Save the raw data
write.csv(rawIndividual,'glmDataRaw7LS.csv', row.names=FALSE)
write.csv(meanByTC,'subjectMeansByTCFactorRaw7LS.csv',row.names = FALSE)
write.csv(grandMean_real,'subjectMeansOverallRaw7LS.csv',row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(car)
library(ggplot2)
library(ggpubr)
library(ggpattern)
library(ggsignif)
library(viridis)
library(xtable)
library(lme4)
library(lmerTest)
dfFull <- read.csv("glmDataRaw7LS.csv")
dfFull$CondShort %<>% as.factor
dfMean <- read.csv('subjectMeansByTCFactorRaw7LS.csv')
dfMean$CondShort %<>% as.factor
dfOverallMean <- read.csv('subjectMeansOverallRaw7LS.csv')
dfOverallMean$CondShort %<>% as.factor
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(car)
library(ggplot2)
library(ggpubr)
library(ggpattern)
library(ggsignif)
library(viridis)
library(xtable)
library(lme4)
library(lmerTest)
dfFull <- read.csv("glmDataRaw7LS.csv")
dfFull$CondShort %<>% as.factor
dfMean <- read.csv('subjectMeansByTCFactorRaw7LS.csv')
dfMean$CondShort %<>% as.factor
dfOverallMean <- read.csv('subjectMeansOverallRaw7LS.csv')
dfOverallMean$CondShort %<>% as.factor
View(dfMean)
model_glm <- glm(
formula = "Correct_Response ~ TC_michelson_c * CondShort",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights
)
#### Perform GLM ####
conds <- levels(dfFull$CondShort)
model_glm <- glmer(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights
)
model_glm <- glmer(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights,
control = glmerControl(optimizer = "bobyqa")
)
1e5
e5
1e5 %>% as.numeric()
1e5/10
model_glm <- glmer(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights,
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5))  # Increase from default 10,000 to 200,000)
)
model_glm <- glmer(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights,
control = glmerControl(optCtrl = list(maxfun = 1e5))  # Increase from default 10,000 to 200,000)
)
model_glm <- glmer(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights,
control = glmerControl(optimizer = "bobyqa",optCtrl = list(maxfun = 1e5))  # Increase from default 10,000 to 200,000)
)
model_glm <- glmer(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights,
control = glmerControl(optimizer = "bobyqa",optCtrl = list(maxfun = 1e6))  # Increase from default 10,000 to 200,000)
)
model_glm <- glmer(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights,
control = glmerControl(optimizer = "bobyqa",optCtrl = list(maxfun = 1e6, tol = .008))  # Increase from default 10,000 to 200,000)
)
model_glm <- glmer(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights,
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 1e6),
check.conv.grad = .makeCC("warning", tol = 0.008, relTol = NULL)
)
)
summary(model_glm)
model_glm
View(model_glm)
summary(model_glm)
# Likelihood Ratio test
model_LRT <-  car::Anova(model_glm,type = 3, test.statistic = 'LR')
library(brms)
# Likelihood Ratio test
model_LRT <-  car::Anova(model_glm,type = 3, test.statistic = 'LR')
install.packages('afex')
afex::mixed(Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number),
family = binomial, data = dfFull, method = "LRT")
model_glm <- glm(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights
)
car::Anova(model_glm,type = 3, test.statistic = 'LR')
# Likelihood Ratio test
model_LRT <-  car::Anova(model_glm,type = 3, test.statistic = 'LR')
model_glm <- glm(
formula = "Correct_Response ~ TC_michelson_c * CondShort",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights
)
# Likelihood Ratio test
model_LRT <-  car::Anova(model_glm,type = 3, test.statistic = 'LR')
model_LRT
model_glm <- afex::mixed(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights
)
model_glm <- afex::mixed(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights,
method = 'PB'
)
model_glm <- afex::mixed(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights,
method = 'LRT'
)
View(dfFull)
#### Perform GLM ####
conds <- levels(dfFull$CondShort)
model_glm <- glm(
formula = "Correct_Response ~ TC_michelson_c * CondShort",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights,
)
dfFull$probability <- predict.glm(model_glm,type='response')
# Likelihood Ratio test
model_LRT <-  car::Anova(model_glm,type = 3, test.statistic = 'LR')
# CI's #
model_CIs <- confint(model_glm)
model_LRT
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(car)
library(ggplot2)
library(ggpubr)
library(ggpattern)
library(ggsignif)
library(viridis)
library(xtable)
library(lme4)
library(lmerTest)
dfFull <- read.csv("glmDataRaw7LS.csv")
dfFull$CondShort %<>% as.factor
dfMean <- read.csv('subjectMeansByTCFactorRaw7LS.csv')
dfMean$CondShort %<>% as.factor
dfOverallMean <- read.csv('subjectMeansOverallRaw7LS.csv')
dfOverallMean$CondShort %<>% as.factor
model_glm <- glmer(
formula = "Correct_Response ~ TC_michelson_c * CondShort",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights,
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)),
check.conv.grad = .makeCC("warning", tol = 0.005, relTol = NULL)  # Looser tolerance
)
model_glm <- glmer(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights,
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)),
check.conv.grad = .makeCC("warning", tol = 0.005, relTol = NULL)
)
model_glm <- glmer(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights,
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5),
check.conv.grad = .makeCC("warning", tol = 0.005, relTol = NULL)),
)
model_glm <- glmer(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights,
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5),
check.conv.grad = .makeCC("warning", tol = 0.002, relTol = NULL)),
)
model_glm <- glmer(
formula = "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)",
family = binomial(link='logit'),
data = dfFull,
contrasts = list(CondShort = contr.treatment(conds, which(conds == 'Single'))),
weights = weights,
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5),
check.conv.grad = .makeCC("warning", tol = 0.005, relTol = NULL)),
)
dfFull$probability <- predict.glm(model_glm,type='response')
dfFull$probability <- predict(model_glm,type='response')
dfFull$probability <- predict(model_glm,type='response', re.form = NA)
# Likelihood Ratio test
model_LRT <-  car::Anova(model_glm,type = 3, test.statistic = 'LR')
# CI's #
model_CIs <-confint(model_glm)
# CI's #
model_CIs <-confint(model_glm, re.form = NA)
