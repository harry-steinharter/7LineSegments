conds
dfReal$CondShort <- recode(dfReal$Condition, recodes =
"'FarHighNarrow' = 'IN'; 'FarLowNarrow' = 'DN';
'FarHighWide' = 'IW'; 'FarLowWide' = 'DW';
'ThreeLinesControl' = 'Single'; 'Constant' = 'Constant'") %>% as.factor()
library(magrittr)
library(dplyr)
MC <- function(L_max, L_min = 112.6482, nDigits=3){
# Function to find michelson contrast using L_min as the background luminance in PsychoPy units
michelson_contrast <- (L_max-L_min) / (L_max+L_min)
michelson_contrast %<>% round(nDigits)
return(michelson_contrast)
}
toCandela <- function(x, nDigits = 10){
CandelaPerMeterSquared <- (x * 112.417) + 112.6482
CandelaPerMeterSquared %<>% round(nDigits)
return(CandelaPerMeterSquared)
}
categorize <- function(df){
df %<>%mutate(
WidthGroup = case_when(
CondShort %in% c("Constant", "Single") ~ "controls",
CondShort %in% c('IW','DW') ~ "wide",
CondShort %in% c('IN','DN') ~ "narrow"
),
ExpectedGroup = case_when(
CondShort %in% c('Constant','IN','IW') ~ 'high',
CondShort %in% c('Single','DN','DW') ~ 'low'
)
)
return(df)
}
setwd('/Users/harrysteinharter/Documents/MSc/Timo Internship/7LineSegments/Analysis')
# List all CSV files in the directory
file_list <- list.files(path = "../Outputs/", pattern = "\\.csv$", full.names = TRUE)
# Read and bind all CSV files into one data frame
all_data <- do.call(rbind, lapply(file_list, read.csv))
df <- all_data %>%  subset(Reaction_Time < 99 & Correct_Response != 'None')
df$Condition %>% unique()
df$Condition %>% unique() %>% ends_with('_null')
# Read and bind all CSV files into one data frame
all_data <- do.call(rbind, lapply(file_list, read.csv))
df <- all_data %>%  subset(Reaction_Time < 99 & Correct_Response != 'None')
df$Correct_Response %<>% as.numeric()
#### Perform transformations ####
if (TRUE){
df$TC_c <- scale(df$Target_Contrast,scale=F) %>% c()
df$TC_michelson <- toCandela(df$Target_Contrast) %>% MC()
df$TC_michelson_c <- scale(df$TC_michelson,scale=F) %>% c()
df$FCfar_c <- scale(df$FCfar,scale=F) %>% c()
df$FCfar_michelson <- toCandela(df$FCfar) %>% MC()
df$FCfar_michelson_c <- scale(df$FCfar_michelson,scale=F) %>% c()
df$FCmed_c <- scale(df$FCmed,scale=F) %>% c()
df$FCmed_michelson <- toCandela(df$FCmed) %>% MC()
df$FCmed_michelson_c <- scale(df$FCmed_michelson,scale=F) %>% c()
df$FCclose_c <- scale(df$FCclose,scale=F) %>% c()
df$FCclose_michelson <- toCandela(df$FCclose) %>% MC()
df$FCclose_michelson_c <- scale(df$FCclose_michelson,scale=F) %>% c()
df %<>% mutate(TC_factor = ggplot2::cut_number(Target_Contrast, 3, labels = c("Low", "Medium", "High")))
}
#### Seperate ####
# Seperate into Real and Null Files
dfNull <- subset(df, endsWith(Condition,"_null"))
#dfNull$CondShort %<>% droplevels()
dfReal <- subset(df, !endsWith(Condition,"_null"))
dfReal$CondShort <- recode(dfReal$Condition, recodes =
"'FarHighNarrow' = 'IN'; 'FarLowNarrow' = 'DN';
'FarHighWide' = 'IW'; 'FarLowWide' = 'DW';
'ThreeLinesControl' = 'Single'; 'Constant' = 'Constant'") %>% as.factor()
dfReal$CondShort
dfReal$CondShort %<>% droplevels()
dfReal$CondShort
library(magrittr)
library(dplyr)
MC <- function(L_max, L_min = 112.6482, nDigits=3){
# Function to find michelson contrast using L_min as the background luminance in PsychoPy units
michelson_contrast <- (L_max-L_min) / (L_max+L_min)
michelson_contrast %<>% round(nDigits)
return(michelson_contrast)
}
toCandela <- function(x, nDigits = 10){
CandelaPerMeterSquared <- (x * 112.417) + 112.6482
CandelaPerMeterSquared %<>% round(nDigits)
return(CandelaPerMeterSquared)
}
categorize <- function(df){
df %<>%mutate(
WidthGroup = case_when(
CondShort %in% c("Constant", "Single") ~ "controls",
CondShort %in% c('IW','DW') ~ "wide",
CondShort %in% c('IN','DN') ~ "narrow"
),
ExpectedGroup = case_when(
CondShort %in% c('Constant','IN','IW') ~ 'high',
CondShort %in% c('Single','DN','DW') ~ 'low'
)
)
return(df)
}
setwd('/Users/harrysteinharter/Documents/MSc/Timo Internship/7LineSegments/Analysis')
# List all CSV files in the directory
file_list <- list.files(path = "../Outputs/", pattern = "\\.csv$", full.names = TRUE)
# Read and bind all CSV files into one data frame
all_data <- do.call(rbind, lapply(file_list, read.csv))
df <- all_data %>%  subset(Reaction_Time < 99 & Correct_Response != 'None')
df$Correct_Response %<>% as.numeric()
#### Perform transformations ####
if (TRUE){
df$TC_c <- scale(df$Target_Contrast,scale=F) %>% c()
df$TC_michelson <- toCandela(df$Target_Contrast) %>% MC()
df$TC_michelson_c <- scale(df$TC_michelson,scale=F) %>% c()
df$FCfar_c <- scale(df$FCfar,scale=F) %>% c()
df$FCfar_michelson <- toCandela(df$FCfar) %>% MC()
df$FCfar_michelson_c <- scale(df$FCfar_michelson,scale=F) %>% c()
df$FCmed_c <- scale(df$FCmed,scale=F) %>% c()
df$FCmed_michelson <- toCandela(df$FCmed) %>% MC()
df$FCmed_michelson_c <- scale(df$FCmed_michelson,scale=F) %>% c()
df$FCclose_c <- scale(df$FCclose,scale=F) %>% c()
df$FCclose_michelson <- toCandela(df$FCclose) %>% MC()
df$FCclose_michelson_c <- scale(df$FCclose_michelson,scale=F) %>% c()
df %<>% mutate(TC_factor = ggplot2::cut_number(Target_Contrast, 3, labels = c("Low", "Medium", "High")))
}
#### Seperate ####
# Seperate into Real and Null Files
dfNull <- subset(df, endsWith(Condition,"_null"))
#dfNull$CondShort %<>% droplevels()
dfReal <- subset(df, !endsWith(Condition,"_null"))
dfReal$CondShort <- recode(dfReal$Condition, recodes =
"'FarHighNarrow' = 'IN'; 'FarLowNarrow' = 'DN';
'FarHighWide' = 'IW'; 'FarLowWide' = 'DW';
'ThreeLinesControl' = 'Single'; 'Constant' = 'Constant'") %>% as.factor()
dfReal$CondShort %<>% droplevels()
#### Mutate real data ####
grandMean_real <- dfReal %>%
group_by(Participant_Number,CondShort) %>%
mutate(overall_mean = mean(TC_michelson), weights = n()) %>%
select(Participant_Number,CondShort,overall_mean,WidthGroup,ExpectedGroup) %>%
ungroup() %>%
distinct()
dfReal %<>% categorize()
library(magrittr)
library(dplyr)
MC <- function(L_max, L_min = 112.6482, nDigits=3){
# Function to find michelson contrast using L_min as the background luminance in PsychoPy units
michelson_contrast <- (L_max-L_min) / (L_max+L_min)
michelson_contrast %<>% round(nDigits)
return(michelson_contrast)
}
toCandela <- function(x, nDigits = 10){
CandelaPerMeterSquared <- (x * 112.417) + 112.6482
CandelaPerMeterSquared %<>% round(nDigits)
return(CandelaPerMeterSquared)
}
categorize <- function(df){
df %<>%mutate(
WidthGroup = case_when(
CondShort %in% c("Constant", "Single") ~ "controls",
CondShort %in% c('IW','DW') ~ "wide",
CondShort %in% c('IN','DN') ~ "narrow"
),
ExpectedGroup = case_when(
CondShort %in% c('Constant','IN','IW') ~ 'high',
CondShort %in% c('Single','DN','DW') ~ 'low'
)
)
return(df)
}
setwd('/Users/harrysteinharter/Documents/MSc/Timo Internship/7LineSegments/Analysis')
# List all CSV files in the directory
file_list <- list.files(path = "../Outputs/", pattern = "\\.csv$", full.names = TRUE)
# Read and bind all CSV files into one data frame
all_data <- do.call(rbind, lapply(file_list, read.csv))
df <- all_data %>%  subset(Reaction_Time < 99 & Correct_Response != 'None')
df$Correct_Response %<>% as.numeric()
#### Perform transformations ####
if (TRUE){
df$TC_c <- scale(df$Target_Contrast,scale=F) %>% c()
df$TC_michelson <- toCandela(df$Target_Contrast) %>% MC()
df$TC_michelson_c <- scale(df$TC_michelson,scale=F) %>% c()
df$FCfar_c <- scale(df$FCfar,scale=F) %>% c()
df$FCfar_michelson <- toCandela(df$FCfar) %>% MC()
df$FCfar_michelson_c <- scale(df$FCfar_michelson,scale=F) %>% c()
df$FCmed_c <- scale(df$FCmed,scale=F) %>% c()
df$FCmed_michelson <- toCandela(df$FCmed) %>% MC()
df$FCmed_michelson_c <- scale(df$FCmed_michelson,scale=F) %>% c()
df$FCclose_c <- scale(df$FCclose,scale=F) %>% c()
df$FCclose_michelson <- toCandela(df$FCclose) %>% MC()
df$FCclose_michelson_c <- scale(df$FCclose_michelson,scale=F) %>% c()
df %<>% mutate(TC_factor = ggplot2::cut_number(Target_Contrast, 3, labels = c("Low", "Medium", "High")))
}
#### Seperate ####
# Seperate into Real and Null Files
dfNull <- subset(df, endsWith(Condition,"_null"))
#dfNull$CondShort %<>% droplevels()
dfReal <- subset(df, !endsWith(Condition,"_null"))
dfReal$CondShort <- recode(dfReal$Condition, recodes =
"'FarHighNarrow' = 'IN'; 'FarLowNarrow' = 'DN';
'FarHighWide' = 'IW'; 'FarLowWide' = 'DW';
'ThreeLinesControl' = 'Single'; 'Constant' = 'Constant'") %>% as.factor()
dfReal$CondShort %<>% droplevels()
dfReal %<>% categorize()
#### Mutate real data ####
grandMean_real <- dfReal %>%
group_by(Participant_Number,CondShort) %>%
mutate(overall_mean = mean(TC_michelson), weights = n()) %>%
select(Participant_Number,CondShort,overall_mean,WidthGroup,ExpectedGroup) %>%
ungroup() %>%
distinct()
meanByTC <- dfReal %>%
group_by(Participant_Number,CondShort,TC_factor) %>%
mutate(mean = mean(Correct_Response), weights = n()) %>%
select(Participant_Number,TC_factor,CondShort,mean,WidthGroup,ExpectedGroup) %>%
ungroup() %>%
distinct()
rawIndividual <- dfReal %>%
group_by(Participant_Number,CondShort,Target_Contrast) %>%
mutate(performance = mean(Correct_Response), weights = n()) %>%
ungroup() %>%
distinct()
# Save the raw data
write.csv(rawIndividual,'glmDataRaw7LS.csv', row.names=FALSE)
write.csv(meanByTC,'subjectMeansByTCFactorRaw7LS.csv',row.names = FALSE)
write.csv(grandMean_real,'subjectMeansOverallRaw7LS.csv',row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(car)
library(ggplot2)
library(ggpubr)
library(ggpattern)
library(ggsignif)
library(viridis)
library(xtable)
library(lme4)
library(lmerTest)
library(afex)
dfFull <- read.csv("glmDataRaw7LS.csv")
dfFull$CondShort %<>% as.factor
dfMean <- read.csv('subjectMeansByTCFactorRaw7LS.csv')
dfMean$CondShort %<>% as.factor
dfOverallMean <- read.csv('subjectMeansOverallRaw7LS.csv')
dfOverallMean$CondShort %<>% as.factor
#### Perform GLM ####
conds <- levels(dfFull$CondShort)
Formula <- "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)"
#### Perform GLM ####
conds <- levels(dfFull$CondShort)
Formula <- "Correct_Response ~ TC_michelson_c * CondShort + (1|Participant_Number)"
Contrasts <- list(CondShort = contr.treatment(conds, which(conds == 'Single')))
model_glm <- glmer(
formula = Formula,
family = binomial(link='logit'),
data = dfFull,
contrasts = Contrasts,
weights = weights,
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5),
check.conv.grad = .makeCC("warning", tol = 0.005, relTol = NULL)),
)
dfFull$probability <- predict(model_glm,type='response', re.form = NA) # re.form=NA is fixed effects only. =NULL is both
# Likelihood Ratio test
#model_LRT <-  car::Anova(model_glm,type = 3, test.statistic = 'LR')
model_LRT <- afex::mixed(
formula = Formula,
data = dfFull,
family = binomial(link = 'logit'),
method = "LRT",  # Type III tests via LRT
type = 3,
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5),
check.conv.grad = .makeCC("warning", tol = 0.005, relTol = NULL))
)
# CI's #
model_CIs <- lme4::confint.merMod(model_glm, method = 'Wald', parm = 'beta_')
model_df <- model_df[-1]
# Make the output DF better and Print it #
model_df <- broom.mixed::tidy(model_glm,effects='fixed') %>% as.data.frame()
model_df <- model_df[-1]
model_df %<>% cbind(.,exp(model_CIs))
model_df %<>%  tibble::add_column('Odds Scale'= exp(model_df$estimate), .after = 2)
model_df$term %<>% gsub("CondShort","",.)
model_df$term %<>% gsub("_michelson_c","",.)
rownames(model_df) <- model_df$term
model_df <- model_df[-1]
newCols <- c('Est.','Odds','SE','z','p','2.5\\%','97.5\\%')
colnames(model_df) <- newCols
for (col in colnames(model_df)){
model_df[[col]] %<>% sprintf("%.2e",.)
}
model_df %>% xtable(
auto = TRUE,
align = c('l','r','r','r','r','r','r','r'),
digits = 3,
label = "table:Exp3GLM",
caption = c("Caption Here","Exp 3: GLM"),) %>%
print(
include.rownames = T,
type = 'latex',
file = "/Users/harrysteinharter/Documents/LaTex/ThesisV2/tables3/Exp3GLM.tex",)
## LRT printing ##
LRT_print <- model_LRT$anova_table
rownames(LRT_print) %<>% gsub("_michelson_c","",.)
rownames(LRT_print) %<>%gsub("CondShort","Flankers",.)
LRT_print$`Pr(>Chisq)` %<>% sprintf("%.2e",.)
print(
xtable(
LRT_print,
align = c('l','r','r','r','r'),
auto = TRUE,
label = "table:Exp3LRT",
caption = c("Caption Here","Exp 3: LRT"),
digits = 2
),
include.rownames = T,
type = 'latex',
file = "/Users/harrysteinharter/Documents/LaTex/ThesisV2/tables3/Exp3LRT.tex",
)
model_TC <- lmer(
data = dfFull,
formula = "TC_michelson_c ~ WidthGroup*ExpectedGroup + (1|Participant_Number)",
weights = weights
)
model_EM <- emmeans::emmeans(model_TC, specs = ~ExpectedGroup*WidthGroup, type = 'response', pbkrtest.limit = 1e5)
AnovaTC <- Anova(model_TC,type=3)
EM_pairs <- pairs(model_EM)
EM_pairs_df <- EM_pairs %>% as.data.frame()
#### Now format the printing of the Anova and Emmeanns
colnames(EM_pairs_df) <- c('Comparison','Est.','SE','df','t-ratio','p')
EM_pairs_df$Comparison %<>% gsub("low","D",.)
EM_pairs_df$Comparison %<>% gsub("high","I",.)
EM_pairs_df$Comparison %<>% gsub("wide","W",.)
EM_pairs_df$Comparison %<>% gsub("narrow","N",.)
EM_pairs_df$Comparison %<>% gsub("D controls","Single",.)
EM_pairs_df$Comparison %<>% gsub("I controls","Constant",.)
EM_pairs_df$Comparison %<>% gsub(" ","",.)
EM_pairs_df$Comparison %<>% gsub("-"," - ",.)
EM_signif_df <- subset(EM_pairs_df, p <= 0.05)
for (i in c(2,3,6)){
EM_pairs_df[[i]] %<>% sprintf("%.2e",.)
EM_signif_df[[i]] %<>% sprintf("%.2e",.)
}
EM_pairs_df$`t-ratio` %<>% sprintf("%.2f",.)
EM_signif_df$`t-ratio` %<>% sprintf("%.2f",.)
sink("/Users/harrysteinharter/Documents/LaTex/ThesisV2/tables3/Exp3Pairwise.tex")
EM_pairs_df %>% xtable(
align = c('c','l','r','r','r','r','r'),
label = "table:Exp3Pairwise",
caption = c("Caption Here","Exp 3: Pairwise"),
) %>% print(
type = 'latex',
include.rownames = F,)
sink("/Users/harrysteinharter/Documents/LaTex/ThesisV2/tables3/Exp3PairwiseSignif.tex")
EM_signif_df %>% xtable(
align = c('c','l','r','r','r','r','r'),
label = "table:Exp3PairwiseSignif",
caption = c("Caption Here","Exp 3: PairwiseSignif"),
) %>% print(
type = 'latex',
include.rownames = F,)
sink()
cV <- viridis(2, option = 'viridis')
colorPalette <- c('high' = cV[1], 'low' = cV[2])
colorPalette <- c('high' = 'firebrick', 'low' = 'dodgerblue')
palette3Way <- viridis(conds %>% length())
palette3Way %<>% setNames(.,conds)
factorCuts <- dfFull %>% subset(TC_factor == 'Medium', select = TC_michelson) %>% range()
ggplot(data = dfFull,
mapping = aes(x = TC_michelson, color = ExpectedGroup)
) + geom_line(
mapping = aes(y = probability, linetype = WidthGroup),
linewidth = 1.0
) + scale_x_continuous(
transform = 'log10'
) + scale_linetype_manual(
name = 'Conditions',
values = c(
'controls' = 'solid',
'narrow' = 'twodash',
'wide' = 'dotted'
),
labels = c('Controls','Narrow','Wide')
) + scale_color_manual(
values = colorPalette,
name = "Contrast",
labels = c('Increasing', 'Decreasing')
) + xlab(
'Target Contrast'
) + ylab(
'Probability of Detection'
) + theme_pubr(
) + theme(
legend.title = element_text(hjust = .5, vjust = .5),
text = element_text(size=16,family='times'),
legend.position = 'right'
) + geom_vline(xintercept = factorCuts, linetype = 'dotted')
ggsave(
filename = "/Users/harrysteinharter/Documents/LaTex/ThesisV2/images3/Exp3GLM.png",
units = 'in',
dpi = 500,
width = W <- 8,
height = W * (2/3)
)
ggplot(
data = dfOverallMean,
mapping = aes(x = factor(CondShort, c('Constant','IN','IW','Single','DN','DW')),
y = overall_mean, group = WidthGroup, linetype = WidthGroup)
) + stat_summary(
mapping = aes(color = ExpectedGroup, shape = WidthGroup),
geom = 'point',
fun = 'mean',
size = I(5),
) + stat_summary(
geom = 'errorbar',
fun.data = mean_cl_normal,
position = position_dodge(width = 0.9),
width = 0.2,
linetype = I('solid')
) + scale_color_manual(
values = colorPalette,
name = "Contrast",
labels = c('Increasing', 'Decreasing')
) + scale_shape_manual(
name = 'Conditions',
values = c(
'controls' = 15,
'narrow' = 16,
'wide' = 17),
labels = c('Controls','Narrow','Wide')
) + scale_x_discrete(
labels = c('Constant','IN','IW','Single','DN','DW')
) + theme_pubr(
) + theme(
legend.title = element_text(hjust = .5, vjust = .5),
text = element_text(size=16,family='times'),
legend.position = 'right'
) + ylab(
"Mean Target Contrast"
) + xlab(
"Condition"
)
ggsave(
filename = "/Users/harrysteinharter/Documents/LaTex/ThesisV2/images3/Exp3AnovaPlot.png",
units = 'in',
dpi = 500,
width = W <- 8,
height = W * (2/3)
)
model3way <- lmer(
data = dfFull,
formula = "Correct_Response ~ TC_factor * WidthGroup * ExpectedGroup + (1|Participant_Number)",
)
anova3way <- Anova(model3way,type = 3)
model_EMx3 <- emmeans::emmeans(model3way, specs = ~ExpectedGroup*WidthGroup|TC_factor,
type = 'response', pbkrtest.limit = 1e5)
EM_pairs_x3 <- pairs(model_EMx3)
EM_pairs_x3@grid$contrast %<>% gsub('low','D',.)
EM_pairs_x3@grid$contrast %<>% gsub('high','I',.)
EM_pairs_x3@grid$contrast %<>% gsub(' narrow','N',.)
EM_pairs_x3@grid$contrast %<>% gsub(' wide','W',.)
EM_pairs_x3@grid$contrast %<>% gsub(' wide','W',.)
EM_pairs_x3@grid$contrast %<>% gsub('I controls','Constant',.)
EM_pairs_x3@grid$contrast %<>% gsub('D controls','Single',.)
sink("/Users/harrysteinharter/Documents/LaTex/ThesisV2/tables3/Exp3Pairs3WayIntrxn.tex")
print(xtable(
EM_pairs_x3,
label = "table:Exp3Pairs3Way",
caption = c("Caption Here","Exp 3: Pairs3Way"),),
type = 'latex',)
sink()
ggplot(
data = dfMean,
mapping = aes(
x = factor(TC_factor,c('Low','Medium','High')), y = mean,
color = ExpectedGroup, shape = WidthGroup,
group = interaction(ExpectedGroup,WidthGroup))) +
stat_summary(
geom = 'point',
fun.data = mean_cl_normal,
position = position_dodge(.75),
size = I(5),) +
stat_summary(
geom = 'errorbar',
fun.data = mean_cl_normal,
position = position_dodge(.75),
width = 0.2,
linetype = I('solid'),
color = 'black') +
scale_color_manual(
values = colorPalette,
labels = c('Increasing','Decreasing'),
name = 'Contrast') +
scale_shape_manual(
values = list(
'controls' = 15,
'narrow' = 16,
'wide' = 17),
labels = c('Controls','Narrow','Wide'),
name = 'Condition') +
theme_pubr() +
theme(
legend.position = 'right',
legend.title = element_text(hjust = .5, vjust = .5),
text = element_text(family = 'times', size = 16)) +
xlab('Target Contrast') + ylab('Mean Response Rate') +
guides(
color = guide_legend(order = 1),
shape = guide_legend(order = 2))
ggsave(
filename = "/Users/harrysteinharter/Documents/LaTex/ThesisV2/images3/Exp3Anova3Way.png",
units = 'in',
dpi = 500,
width = W <- 8,
height = W * (2/3)
)
