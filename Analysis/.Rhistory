#axis.text = element_text(size = 12),
text = element_text(size=16,family='times')
)
#### Create line plot of Probit probabilies and raw data ####
draw_all = T
draw_vlines = F
draw_hlines = F
these = c('Straight','Target','C_20')
if (draw_all){
to_draw = df
} else{
to_draw = subset(df, df$Condition == these)
}
ggplot(
data = to_draw
) + geom_jitter(
mapping = aes(x = TC_michelson, y = Correct_Response, colour = relevel(Condition,'Straight')),
alpha = I(.2),
size = I(.5),
height = 0.05,
width = 0.1
) + geom_line(
mapping = aes(x = TC_michelson, y = probability, colour = Condition),
linewidth = 1.2
) + theme_pubr(
) + scale_x_log10(
guide = guide_axis_logticks()
) + xlab(
"Michelson Contrast of the Target Stimulus"
) + ylab(
'Probability of Detection'
) + labs(
color = 'Flanker\nOrientation'
) + scale_color_manual(
values = color_map,
labels = nameMap
) + theme(
legend.title = element_text(hjust = .5),
#legend.text = element_text(size = 12),
#axis.title = element_text(size = 16),
#axis.text = element_text(size = 12),
text = element_text(size=16,family='times')
)
#### Create line plot of Probit probabilies and raw data ####
draw_all = T
draw_vlines = F
draw_hlines = F
these = c('Straight','Target','C_20','C_22')
if (draw_all){
to_draw = df
} else{
to_draw = subset(df, df$Condition == these)
}
ggplot(
data = to_draw
) + geom_jitter(
mapping = aes(x = TC_michelson, y = Correct_Response, colour = relevel(Condition,'Straight')),
alpha = I(.2),
size = I(.5),
height = 0.05,
width = 0.1
) + geom_line(
mapping = aes(x = TC_michelson, y = probability, colour = Condition),
linewidth = 1.2
) + theme_pubr(
) + scale_x_log10(
guide = guide_axis_logticks()
) + xlab(
"Michelson Contrast of the Target Stimulus"
) + ylab(
'Probability of Detection'
) + labs(
color = 'Flanker\nOrientation'
) + scale_color_manual(
values = color_map,
labels = nameMap
) + theme(
legend.title = element_text(hjust = .5),
#legend.text = element_text(size = 12),
#axis.title = element_text(size = 16),
#axis.text = element_text(size = 12),
text = element_text(size=16,family='times')
)
ggsave(
filename = "/Users/harrysteinharter/Documents/LaTex/MSc_Thesis_writing/images2/Exp2GlmFull.png",
units = 'in',
dpi = 500,
width = W <- 8,
height = W * (2/3)
)
draw_all = F
draw_vlines = F
draw_hlines = F
these = c('Straight','Target','C_20','C_22')
if (draw_all){
to_draw = df
} else{
to_draw = subset(df, df$Condition == these)
}
ggplot(
data = to_draw
) + geom_jitter(
mapping = aes(x = TC_michelson, y = Correct_Response, colour = relevel(Condition,'Straight')),
alpha = I(.2),
size = I(.5),
height = 0.05,
width = 0.1
) + geom_line(
mapping = aes(x = TC_michelson, y = probability, colour = Condition),
linewidth = 1.2
) + theme_pubr(
) + scale_x_log10(
guide = guide_axis_logticks()
) + xlab(
"Michelson Contrast of the Target Stimulus"
) + ylab(
'Probability of Detection'
) + labs(
color = 'Flanker\nOrientation'
) + scale_color_manual(
values = color_map,
labels = nameMap
) + theme(
legend.title = element_text(hjust = .5),
#legend.text = element_text(size = 12),
#axis.title = element_text(size = 16),
#axis.text = element_text(size = 12),
text = element_text(size=16,family='times')
)
#### Create line plot of Probit probabilies and raw data ####
draw_all = F
draw_vlines = F
draw_hlines = F
these = c('Straight','Target','C_20','C_22')
if (draw_all){
to_draw = df
} else{
to_draw = subset(df, df$Condition == these)
}
ggplot(
data = to_draw
) + geom_jitter(
mapping = aes(x = TC_michelson, y = Correct_Response, colour = relevel(Condition,'Straight')),
alpha = I(.2),
size = I(.5),
height = 0.05,
width = 0.1
) + geom_line(
mapping = aes(x = TC_michelson, y = probability, colour = Condition),
linewidth = 1.2
) + theme_pubr(
) + scale_x_log10(
guide = guide_axis_logticks()
) + xlab(
"Michelson Contrast of the Target Stimulus"
) + ylab(
'Probability of Detection'
) + labs(
color = 'Flanker\nOrientation'
) + scale_color_manual(
values = color_map,
labels = nameMap
) + theme(
legend.title = element_text(hjust = .5),
#legend.text = element_text(size = 12),
#axis.title = element_text(size = 16),
#axis.text = element_text(size = 12),
text = element_text(size=16,family='times')
)
ggsave(
filename = "/Users/harrysteinharter/Documents/LaTex/MSc_Thesis_writing/images2/Exp2GlmPart.png",
units = 'in',
dpi = 500,
width = W <- 8,
height = W * (2/3)
)
#### Create line plot of Probit probabilies and raw data ####
draw_all = TRUE
draw_vlines = F
draw_hlines = F
these = c('Straight','Target','C_20','C_22')
if (draw_all){
to_draw = df
} else{
to_draw = subset(df, df$Condition == these)
}
ggplot(
data = to_draw
) + geom_jitter(
mapping = aes(x = TC_michelson, y = Correct_Response, colour = relevel(Condition,'Straight')),
alpha = I(.2),
size = I(.5),
height = 0.05,
width = 0.1
) + geom_line(
mapping = aes(x = TC_michelson, y = probability, colour = Condition),
linewidth = 1.2
) + theme_pubr(
) + scale_x_log10(
guide = guide_axis_logticks()
) + xlab(
"Michelson Contrast of the Target Stimulus"
) + ylab(
'Probability of Detection'
) + labs(
color = 'Flanker\nOrientation'
) + scale_color_manual(
values = color_map,
labels = nameMap
) + theme(
legend.title = element_text(hjust = .5),
#legend.text = element_text(size = 12),
#axis.title = element_text(size = 16),
#axis.text = element_text(size = 12),
text = element_text(size=16,family='times')
)
draw_all = FALSE
draw_vlines = F
draw_hlines = F
these = c('Straight','Target','C_20','C_22')
if (draw_all){
to_draw = df
} else{
to_draw = subset(df, df$Condition == these)
}
ggplot(
data = to_draw
) + geom_jitter(
mapping = aes(x = TC_michelson, y = Correct_Response, colour = relevel(Condition,'Straight')),
alpha = I(.2),
size = I(.5),
height = 0.05,
width = 0.1
) + geom_line(
mapping = aes(x = TC_michelson, y = probability, colour = Condition),
linewidth = 1.2
) + theme_pubr(
) + scale_x_log10(
guide = guide_axis_logticks()
) + xlab(
"Michelson Contrast of the Target Stimulus"
) + ylab(
'Probability of Detection'
) + labs(
color = 'Flanker\nOrientation'
) + scale_color_manual(
values = color_map,
labels = nameMap
) + theme(
legend.title = element_text(hjust = .5),
#legend.text = element_text(size = 12),
#axis.title = element_text(size = 16),
#axis.text = element_text(size = 12),
text = element_text(size=16,family='times')
)
#### Create line plot of Probit probabilies and raw data ####
draw_all = FALSE
draw_vlines = F
draw_hlines = F
these = c('Straight','Target','C_20','C_22')
if (draw_all){
to_draw = df
} else{
to_draw = subset(df, df$Condition == these)
}
?%in%
help(%in%)
help('%in%')
xxx <- rep(c(1,3,1,23,4),55)
xxx
1 %in% xxx
#### Create line plot of Probit probabilies and raw data ####
draw_all = FALSE
draw_vlines = F
draw_hlines = F
these = c('Straight','Target','C_20','C_22')
if (draw_all){
to_draw = df
} else{
to_draw = subset(df, df$Condition %in% these)
}
ggplot(
data = to_draw
) + geom_jitter(
mapping = aes(x = TC_michelson, y = Correct_Response, colour = relevel(Condition,'Straight')),
alpha = I(.2),
size = I(.5),
height = 0.05,
width = 0.1
) + geom_line(
mapping = aes(x = TC_michelson, y = probability, colour = Condition),
linewidth = 1.2
) + theme_pubr(
) + scale_x_log10(
guide = guide_axis_logticks()
) + xlab(
"Michelson Contrast of the Target Stimulus"
) + ylab(
'Probability of Detection'
) + labs(
color = 'Flanker\nOrientation'
) + scale_color_manual(
values = color_map,
labels = nameMap
) + theme(
legend.title = element_text(hjust = .5),
#legend.text = element_text(size = 12),
#axis.title = element_text(size = 16),
#axis.text = element_text(size = 12),
text = element_text(size=16,family='times')
)
#### Create line plot of Probit probabilies and raw data ####
draw_all = FALSE
draw_vlines = F
draw_hlines = F
these = c('Straight','Target','C_20','C_22')
if (draw_all){
to_draw = df
} else{
to_draw = subset(df, df$Condition %in% these)
}
ggplot(
data = to_draw
) + geom_jitter(
mapping = aes(x = TC_michelson, y = Correct_Response, colour = relevel(Condition,'Straight')),
alpha = I(.2),
size = I(.5),
height = 0.05,
width = 0.1
) + geom_line(
mapping = aes(x = TC_michelson, y = probability, colour = Condition),
linewidth = 1.2
) + theme_pubr(
) + scale_x_log10(
guide = guide_axis_logticks()
) + xlab(
"Michelson Contrast of the Target Stimulus"
) + ylab(
'Probability of Detection'
) + labs(
color = 'Flanker\nOrientation'
) + scale_color_manual(
values = color_map,
labels = nameMap
) + theme(
legend.title = element_text(hjust = .5),
#legend.text = element_text(size = 12),
#axis.title = element_text(size = 16),
#axis.text = element_text(size = 12),
text = element_text(size=16,family='times')
)
ggsave(
filename = "/Users/harrysteinharter/Documents/LaTex/MSc_Thesis_writing/images2/Exp2GlmPart.png",
units = 'in',
dpi = 500,
width = W <- 8,
height = W * (2/3)
)
save.image('/Users/harrysteinharter/Documents/MSc/Timo Internship/Pilot_V3/C_Angle_Staircase/Exp2_Angle_V2.RData')
knitr::opts_chunk$set(echo = TRUE)
library(lavaan)
library(magrittr)
library(dplyr)
library(ggplot2)
library(car)
MC <- function(L_max, L_min = 112.6482, nDigits=3){
# Function to find michelson contrast using L_min as the background luminance in PsychoPy units
michelson_contrast <- (L_max-L_min) / (L_max+L_min)
michelson_contrast %<>% round(nDigits)
return(michelson_contrast)
}
toCandela <- function(x, nDigits = 3){
CandelaPerMeterSquared <- (x * 112.417) + 112.6482
CandelaPerMeterSquared %<>% round(nDigits)
return(CandelaPerMeterSquared)
}
dfExp1 <- read.csv('/Users/harrysteinharter/Documents/MSc/Timo Internship/project_steinharter/data/raw_real.csv')
dfExp2 <- read.csv('/Users/harrysteinharter/Documents/MSc/Timo Internship/Pilot_V3/C_Angle_Staircase/angle_data/raw_real.csv')
dfExp1 <- dfExp1[,1:6]
dfExp2 <- dfExp2[,1:6]
dfExp1$Condition %<>% gsub("C","C_30",.)
dfExp1$Condition %<>% gsub("back_","B",.)
df <- rbind(dfExp1,dfExp2)
df$Condition %<>% as.factor(.)
df$Condition_o <- ordered(df$Condition,
c('Target','BC_30','C_30','C_22','C_20','C_18','C_16','C_15','C_14','C_12','C_10','Straight')
)
df$TC_c <- scale(df$Target_Contrast,scale=F) %>% c()
df$TC_michelson <- toCandela(df$Target_Contrast) %>% MC()
df$TC_michelson_c <- scale(df$TC_michelson,scale=F) %>% c()
df$FC_michelson <- toCandela(df$Flanker_Contrast) %>% MC()
df$FC_michelson_f <- df$FC_michelson %>% as.factor()
df$Flanker_Contrast %<>% as.factor()
df %<>% mutate(TC_factor = cut_number(TC_michelson_c, 3, labels = c("Low", "Medium", "High")))
myModel <- '
# regressions
TC_michelson_c ~ FC_michelson + Condition_o
Correct_Response ~ TC_michelson_c + FC_michelson + Condition_o
# intercepts
Correct_Response ~ 1
'
fit <- sem(myModel,df)
contr.treatment(levels(df$Condition))
contr.treatment(levels(df$Condition)) %>% contrast()
contr.treatment(levels(df$Condition)) %>% contrasts()
contr.treatment(levels(df$Condition)) %>% matrix()
contr.treatment(levels(df$Condition))
file_list <- list.files(path = "../Outputs/", pattern = "\\.csv$", full.names = TRUE)
# Read and bind all CSV files into one data frame
all_data <- do.call(rbind, lapply(file_list, read.csv))
# Seperate into Real and Null Files
dfNull <- subset(all_data, endsWith(Condition,"_null"))
# List all CSV files in the directory
file_list <- list.files(path = "../Outputs/", pattern = "\\.csv$", full.names = TRUE)
# List all CSV files in the directory
file_list <- list.files(path = "../Outputs/", pattern = "\\.csv$", full.names = TRUE)
setwd('/Users/harrysteinharter/Documents/MSc/Timo Internship/7LineSegments/Analysis')
# List all CSV files in the directory
file_list <- list.files(path = "../Outputs/", pattern = "\\.csv$", full.names = TRUE)
# Read and bind all CSV files into one data frame
all_data <- do.call(rbind, lapply(file_list, read.csv))
# Seperate into Real and Null Files
dfNull <- subset(all_data, endsWith(Condition,"_null"))
dfReal <- subset(all_data, !endsWith(Condition,"_null"))
write(dfReal,'rawData7LS.csv')
write.csv(dfReal,'rawData7LS', row.names=FALSE)
write.csv(dfReal,'rawData7LS.csv', row.names=FALSE)
View(dfNull)
levels(dfNull$Condition)
as.factor(dfNull$Condition)
library(magrittr)
df$Condition %<>% as.factor
# Calculate false-positive rate
FPs <- c()
df$Condition %<>% as.factor
for (lvl in levels(df$Condition)){
print(lvl)
}
dfNull$Condition %<>% as.factor
for (lvl in levels(dfNull$Condition)){
print(lvl)
}
# Read and bind all CSV files into one data frame
all_data <- do.call(rbind, lapply(file_list, read.csv))
setwd('/Users/harrysteinharter/Documents/MSc/Timo Internship/7LineSegments/Analysis')
# List all CSV files in the directory
file_list <- list.files(path = "../Outputs/", pattern = "\\.csv$", full.names = TRUE)
# Read and bind all CSV files into one data frame
all_data <- do.call(rbind, lapply(file_list, read.csv))
# Seperate into Real and Null Files
dfNull <- subset(all_data, endsWith(Condition,"_null"))
dfReal <- subset(all_data, !endsWith(Condition,"_null"))
# Calculate false-positive rate
FPs <- c()
dfNull$Condition %<>% as.factor
for (lvl in levels(dfNull$Condition)){
print(lvl)
}
# Calculate false-positive rate
FPs <- c()
dfNull$Condition %<>% as.factor
for (lvl in levels(dfNull$Condition)){
FPs[lvl] <- subset(dfNull, Condition == lvl, select = Correct_Response) %>% mean()
}
for (lvl in levels(dfNull$Condition)){
FPs[lvl] <- subset(dfNull, Condition == lvl, select = Correct_Response)
}
FPs
FPs$Constant_null
FPs$Constant_null %>% mean()
for (lvl in levels(dfNull$Condition)){
print(lvl)
}
View(dfNull)
View(dfReal)
which(dfReal$Reaction_Time == 99)
len(which(dfReal$Reaction_Time == 99))
length(which(dfReal$Reaction_Time == 99))
length(which(dfReal$Reaction_Time == 99)) / nrow(dfReal)
# Calculate false-positive rate
FPs <- c()
dfNull$Condition %<>% as.factor
for (lvl in levels(dfNull$Condition)){
FPs[lvl] <- subset(dfNull, Condition == lvl, select = Correct_Response)
}
FPs$Constant_null %>% mean()
FPs[lvl] <- subset(dfNull, Condition == lvl, select = Correct_Response) %>% mean()
# Calculate false-positive rate
FPs <- c()
dfNull$Condition %<>% as.factor
for (lvl in levels(dfNull$Condition)){
FPs[lvl] <- subset(dfNull, Condition == lvl, select = Correct_Response)
FPs[lvl] %<>% mean()
}
# Calculate false-positive rate
FPs <- c()
dfNull$Condition %<>% as.factor
for (lvl in levels(dfNull$Condition)){
FPs[lvl] <- subset(dfNull, Condition == lvl, select = Correct_Response)
}
FPs$Constant_null %>% mean()
FPs[lvl] <- subset(dfNull, Condition == lvl, select = Correct_Response) %>% c() %>% mean()
# Calculate false-positive rate
FPs <- c()
dfNull$Condition %<>% as.factor
for (lvl in levels(dfNull$Condition)){
FPs[lvl] <- mean(dfNull[dfNull$Condition == lvl, Correct_Response])
}
for (lvl in levels(dfNull$Condition)){
FPs[lvl] <- mean(dfNull[dfNull$Condition == lvl, 'Correct_Response'])
}
FPs
